import torch
import torch.nn as nn

import numpy as np
import torch.nn.functional as F
import math
import copy
import time
from torch.autograd import Variable
import matplotlib.pyplot as plt

# NOTE ==============================================
#
# Fill in code for every method which has a TODO
#
# Your implementation should use the contract (inputs
# and outputs) given for each model, because that is
# what the main script expects. If you modify the contract,
# you must justify that choice, note it in your report, and notify the TAs
# so that we run the correct code.
#
# You may modify the internals of the RNN and GRU classes
# as much as you like, except you must keep the methods
# in each (init_weights_uniform, init_hidden, and forward)
# Using nn.Module and "forward" tells torch which
# parameters are involved in the forward pass, so that it
# can correctly (automatically) set up the backward pass.
#
# You should not modify the interals of the Transformer
# except where indicated to implement the multi-head
# attention.


def clones(module, N):
	"""
	A helper function for producing N identical layers (each with their own parameters).

	inputs:
		module: a pytorch nn.module
		N (int): the number of copies of that module to return

	returns:
		a ModuleList with the copies of the module (the ModuleList is itself also a module)
	"""
	return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])

# Problem 1


class RNN(nn.Module):  # Implement a stacked vanilla RNN with Tanh nonlinearities.
	def __init__(self, emb_size, hidden_size, seq_len, batch_size,
		vocab_size, num_layers, dp_keep_prob):
		"""
		emb_size:     The numvwe of units in the input embeddings
		hidden_size:  The number of hidden units per layer
		seq_len:      The length of the input sequences
		vocab_size:   The number of tokens in the vocabulary (10,000 for Penn TreeBank)
		num_layers:   The depth of the stack (i.e. the number of hidden layers at
					  each time-step)
		dp_keep_prob: The probability of *not* dropping out units in the
					  non-recurrent connections.
					  Do not apply dropout on recurrent connections.
		"""
		super(RNN, self).__init__()
		self.emb_size = emb_size
		self.hidden_size = hidden_size
		self.num_layers = num_layers
		self.dp_keep_prob = dp_keep_prob

		self.model_list = nn.ModuleList([WordEmbedding(emb_size, vocab_size)])
		self.model_list.append(nn.Dropout(keep_prob=dp_keep_prob))
		for _ in range(num_layers):
			self.model_list.append(RNN_cell(emb_size, hidden_size))
			self.model_list.append(nn.Dropout(keep_prob=dp_keep_prob))
		self.model_list.append(nn.Linear(hidden_size, vocab_size))

		# for i in range(num_layers):
		# 	if i == 0:
		# 		self.Wx[i] = Parameter(torch.Tensor(emb_size, hidden_size))
		# 		self.Wh[i] = Parameter(torch.Tensor(hidden_size, hidden_size))
		# 		self.b[i] = Parameter(torch.Tensor(hidden_size))
		# 	else:
		# 		self.Wx[i] = Parameter(torch.Tensor(hidden_size, hidden_size))
		# 		self.Wh[i] = Parameter(torch.Tensor(hidden_size, hidden_size))
		# 		self.b[i] = Parameter(torch.Tensor(hidden_size))
		
		self.init_weights()


	# def init_weights(self):
	# 	for i in range(self.num_layers):
	# 		k = 1. / math.sqrt(self.hidden_size)
	# 		self.Wx.data.uniform_(-k, k)
	# 		self.Wh.data.uniform_(-k, k)
	# 		self.b.data.constant_(0)
	def init_weights(self, m):
	    if type(m) == nn.Linear:
	        torch.nn.init.xavier_uniform(m.weight)
	        m.bias.data.fill_(0.)
	    elif type(m) == WordEmbedding:
	    	


	def init_hidden(self):
		"""
		This is used for the first mini-batch in an epoch, only.
		"""
		return  # a parameter tensor of shape (self.num_layers, self.batch_size, self.hidden_size)

	def forward(self, inputs, hidden):
		x = WordEmbedding(self.emb_size, self.vocab_size)(inputs)
		x = nn.Dropout(keep_prob=self.dp_keep_prob)(x)

		for i in range(self.num_layers):
			if i > 0:
				x = hidden[i-1]

			hidden[i] = F.tanh(torch.mm(x,self.Wx[i]) + torch.mm(hidden[i],self.Wh[i])
				+ self.b[i])

		logits = nn.Linear()(x)
		
		return logits.view(self.seq_len, self.batch_size, self.vocab_size), hidden

	def generate(self, input, hidden, generated_seq_len):
		# TODO ========================
		# Compute the forward pass, as in the self.forward method (above).
		# You'll probably want to copy substantial portions of that code here.
		#
		# We "seed" the generation by providing the first inputs.
		# Subsequent inputs are generated by sampling from the output distribution,
		# as described in the tex (Problem 5.3)
		# Unlike for self.forward, you WILL need to apply the softmax activation
		# function here in order to compute the parameters of the categorical
		# distributions to be sampled from at each time-step.
		"""
		Arguments:
			- input: A mini-batch of input tokens (NOT sequences!)
							shape: (batch_size)
			- hidden: The initial hidden states for every layer of the stacked RNN.
							shape: (num_layers, batch_size, hidden_size)
			- generated_seq_len: The length of the sequence to generate.
						   Note that this can be different than the length used
						   for training (self.seq_len)
		Returns:
			- Sampled sequences of tokens
						shape: (generated_seq_len, batch_size)
		"""

	return samples


# Problem 2
class GRU(nn.Module):  # Implement a stacked GRU RNN
  """
  Follow the same instructions as for RNN (above), but use the equations for
  GRU, not Vanilla RNN.
  """

  def __init__(self, emb_size, hidden_size, seq_len, batch_size, vocab_size, num_layers, dp_keep_prob):
	super(GRU, self).__init__()

	self.seq_len = seq_len
	self.batch_size = batch_size
	self.vocab_size = vocab_size

	self.model_list = nn.ModuleList([WordEmbedding(emb_size, vocab_size)])
	for _ in range(seq_len):
		self.model_list.append(nn.Dropout(keep_prob=dp_keep_prob))
		self.model_list.append(nn.Linear(x, hidden_size))

  def init_weights_uniform(self, m):
	if type(m) == nn.WordEmbedding:
		torch.nn.init.uniform_(m.weight, a=-0.1, b=0.1)
		m.bias.data.fill_(0.)
	elif type(m) == nn.Linear:
		torch.nn.init.xavier_uniform(m.weight)
		m.bias.data.fill_(0.01)

  def init_hidden(self):
	hidden = torch.zeros(self.num_layers, self.batch_size, self.hidden_size)
	return hidden # a parameter tensor of shape (self.num_layers, self.batch_size, self.hidden_size)

  def forward(self, inputs, hidden):
	# TODO ========================
	return logits.view(self.seq_len, self.batch_size, self.vocab_size), hidden

  def generate(self, input, hidden, generated_seq_len):
	# TODO ========================
	return samples


# Problem 3
##############################################################################
#
# Code for the Transformer model
#
##############################################################################

"""
Implement the MultiHeadedAttention module of the transformer architecture.
All other necessary modules have already been implemented for you.

We're building a transfomer architecture for next-step prediction tasks, and 
applying it to sequential language modelling. We use a binary "mask" to specify 
which time-steps the model can use for the current prediction.
This ensures that the model only attends to previous time-steps.

The model first encodes inputs using the concatenation of a learned WordEmbedding 
and a (in our case, hard-coded) PositionalEncoding.
The word embedding maps a word's one-hot encoding into a dense real vector.
The positional encoding 'tags' each element of an input sequence with a code that 
identifies it's position (i.e. time-step).

These encodings of the inputs are then transformed repeatedly using multiple
copies of a TransformerBlock.
This block consists of an application of MultiHeadedAttention, followed by a 
standard MLP; the MLP applies *the same* mapping at every position.
Both the attention and the MLP are applied with Resnet-style skip connections, 
and layer normalization.

The complete model consists of the embeddings, the stacked transformer blocks, 
and a linear layer followed by a softmax.
"""

# This code has been modified from an open-source project, by David Krueger.
# The original license is included below:
# MIT License
#
# Copyright (c) 2018 Alexander Rush
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.



#----------------------------------------------------------------------------------

# TODO: implement this class
class MultiHeadedAttention(nn.Module):
	def __init__(self, n_heads, n_units, dropout=0.1):
		"""
		n_heads: the number of attention heads
		n_units: the number of output units
		dropout: probability of DROPPING units
		"""
		super(MultiHeadedAttention, self).__init__()
		# This sets the size of the keys, values, and queries (self.d_k) to all 
		# be equal to the number of output units divided by the number of heads.
		self.d_k = n_units // n_heads
		# This requires the number of n_heads to evenly divide n_units.
		assert n_units % n_heads == 0
		self.n_units = n_units 

		# TODO: create/initialize any necessary parameters or layers
		# Initialize all weights and biases uniformly in the range [-k, k],
		# where k is the square root of 1/n_units.
		# Note: the only Pytorch modules you are allowed to use are nn.Linear 
		# and nn.Dropout
		
	def forward(self, query, key, value, mask=None):
		# TODO: implement the masked multi-head attention.
		# query, key, and value all have size: (batch_size, seq_len, self.n_units)
		# mask has size: (batch_size, seq_len, seq_len)
		# As described in the .tex, apply input masking to the softmax 
		# generating the "attention values" (i.e. A_i in the .tex)
		# Also apply dropout to the attention values.

		return # size: (batch_size, seq_len, self.n_units)






#----------------------------------------------------------------------------------
# The encodings of elements of the input sequence

class WordEmbedding(nn.Module):
	def __init__(self, n_units, vocab):
		super(WordEmbedding, self).__init__()
		self.lut = nn.Embedding(vocab, n_units)
		self.n_units = n_units

	def forward(self, x):
		return self.lut(x) * math.sqrt(self.n_units)


class PositionalEncoding(nn.Module):
	def __init__(self, n_units, dropout, max_len=5000):
		super(PositionalEncoding, self).__init__()
		self.dropout = nn.Dropout(p=dropout)
		
		# Compute the positional encodings once in log space.
		pe = torch.zeros(max_len, n_units)
		position = torch.arange(0, max_len).unsqueeze(1).float()
		div_term = torch.exp(torch.arange(0, n_units, 2).float() *
							 -(math.log(10000.0) / n_units))
		pe[:, 0::2] = torch.sin(position * div_term)
		pe[:, 1::2] = torch.cos(position * div_term)
		pe = pe.unsqueeze(0)
		self.register_buffer('pe', pe)
		
	def forward(self, x):
		x = x + Variable(self.pe[:, :x.size(1)], 
						 requires_grad=False)
		return self.dropout(x)



#----------------------------------------------------------------------------------
# The TransformerBlock and the full Transformer


class TransformerBlock(nn.Module):
	def __init__(self, size, self_attn, feed_forward, dropout):
		super(TransformerBlock, self).__init__()
		self.size = size
		self.self_attn = self_attn
		self.feed_forward = feed_forward
		self.sublayer = clones(ResidualSkipConnectionWithLayerNorm(size, dropout), 2)
 
	def forward(self, x, mask):
		x = self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask)) # apply the self-attention
		return self.sublayer[1](x, self.feed_forward) # apply the position-wise MLP


class TransformerStack(nn.Module):
	"""
	This will be called on the TransformerBlock (above) to create a stack.
	"""
	def __init__(self, layer, n_blocks): # layer will be TransformerBlock (below)
		super(TransformerStack, self).__init__()
		self.layers = clones(layer, n_blocks)
		self.norm = LayerNorm(layer.size)
		
	def forward(self, x, mask):
		for layer in self.layers:
			x = layer(x, mask)
		return self.norm(x)


class FullTransformer(nn.Module):
	def __init__(self, transformer_stack, embedding, n_units, vocab_size):
		super(FullTransformer, self).__init__()
		self.transformer_stack = transformer_stack
		self.embedding = embedding
		self.output_layer = nn.Linear(n_units, vocab_size)
		
	def forward(self, input_sequence, mask):
		embeddings = self.embedding(input_sequence)
		return F.log_softmax(self.output_layer(self.transformer_stack(embeddings, mask)), dim=-1)


def make_model(vocab_size, n_blocks=6, 
			   n_units=512, n_heads=16, dropout=0.1):
	"Helper: Construct a model from hyperparameters."
	c = copy.deepcopy
	attn = MultiHeadedAttention(n_heads, n_units)
	ff = MLP(n_units, dropout)
	position = PositionalEncoding(n_units, dropout)
	model = FullTransformer(
		transformer_stack=TransformerStack(TransformerBlock(n_units, c(attn), c(ff), dropout), n_blocks),
		embedding=nn.Sequential(WordEmbedding(n_units, vocab_size), c(position)),
		n_units=n_units,
		vocab_size=vocab_size
		)
	
	# Initialize parameters with Glorot / fan_avg.
	for p in model.parameters():
		if p.dim() > 1:
			nn.init.xavier_uniform_(p)
	return model


#----------------------------------------------------------------------------------
# Data processing

def subsequent_mask(size):
	""" helper function for creating the masks. """
	attn_shape = (1, size, size)
	subsequent_mask = np.triu(np.ones(attn_shape), k=1).astype('uint8')
	return torch.from_numpy(subsequent_mask) == 0

class Batch:
	"Object for holding a batch of data with mask during training."
	def __init__(self, x, pad=0):
		self.data = x
		self.mask = self.make_mask(self.data, pad)
	
	@staticmethod
	def make_mask(data, pad):
		"Create a mask to hide future words."
		mask = (data != pad).unsqueeze(-2)
		mask = mask & Variable(
			subsequent_mask(data.size(-1)).type_as(mask.data))
		return mask


#----------------------------------------------------------------------------------
# Some standard modules

class LayerNorm(nn.Module):
	"layer normalization, as in: https://arxiv.org/abs/1607.06450"
	def __init__(self, features, eps=1e-6):
		super(LayerNorm, self).__init__()
		self.a_2 = nn.Parameter(torch.ones(features))
		self.b_2 = nn.Parameter(torch.zeros(features))
		self.eps = eps

	def forward(self, x):
		mean = x.mean(-1, keepdim=True)
		std = x.std(-1, keepdim=True)
		return self.a_2 * (x - mean) / (std + self.eps) + self.b_2


class ResidualSkipConnectionWithLayerNorm(nn.Module):
	"""
	A residual connection followed by a layer norm.
	Note for code simplicity the norm is first as opposed to last.
	"""
	def __init__(self, size, dropout):
		super(ResidualSkipConnectionWithLayerNorm, self).__init__()
		self.norm = LayerNorm(size)
		self.dropout = nn.Dropout(dropout)

	def forward(self, x, sublayer):
		"Apply residual connection to any sublayer with the same size."
		return x + self.dropout(sublayer(self.norm(x)))


class MLP(nn.Module):
	"""
	This is just an MLP with 1 hidden layer
	"""
	def __init__(self, n_units, dropout=0.1):
		super(MLP, self).__init__()
		self.w_1 = nn.Linear(n_units, 2048)
		self.w_2 = nn.Linear(2048, n_units)
		self.dropout = nn.Dropout(dropout)

	def forward(self, x):
		return self.w_2(self.dropout(F.relu(self.w_1(x))))

#----------------------------------------------------------------------------------
# Some extra modules

class RNN_cell(nn.Module):
	def __init__(self, emb_size, hidden_size):
		super(RNN_cell, self).__init__()
		self.emb_size = emb_size
		self.hidden_size = hidden_size

		self.Wx = Parameter(torch.Tensor(emb_size, hidden_size))
		self.Wh = Parameter(torch.Tensor(hidden_size, hidden_size))
		self.b = Parameter(torch.Tensor(hidden_size))
		self.reset_parameters()

	def reset_parameters(self):
		k = 1. / math.sqrt(self.hidden_size)
		self.Wx.data.uniform_(-k, k)
		self.Wh.data.uniform_(-k, k)
		self.b.data.uniform_(-k, k)

	def forward(self, inputs, hidden):
		return F.tanh(torch.mm(inputs, self.Wx) + torch.mm(hidden, self.Wh) + self.b)


def rnn_step_forward(x, prev_h, Wx, Wh, b):
	"""
	Run the forward pass for a single timestep of a vanilla RNN that uses a tanh
	activation function.
	The input data has dimension D, the hidden state has dimension H, and we use
	a minibatch size of N.
	Inputs:
	- x: Input data for this timestep, of shape (N, D).
	- prev_h: Hidden state from previous timestep, of shape (N, H)
	- Wx: Weight matrix for input-to-hidden connections, of shape (D, H)
	- Wh: Weight matrix for hidden-to-hidden connections, of shape (H, H)
	- b: Biases of shape (H,)
	Returns a tuple of:
	- next_h: Next hidden state, of shape (N, H)
	- cache: Tuple of values needed for the backward pass.
	"""
	next_h, cache = None, None
	##############################################################################
	# TODO: Implement a single forward step for the vanilla RNN. Store the next  #
	# hidden state and any values you need for the backward pass in the next_h   #
	# and cache variables respectively.                                          #
	##############################################################################
	next_h = np.tanh(x.dot(Wx) + prev_h.dot(Wh) + b)
	cache = (x, prev_h, next_h, Wx, Wh, b)
	##############################################################################
	#                               END OF YOUR CODE                             #
	##############################################################################
	return next_h, cache